version: '3.6'
services:
    db:
        image: mysql:latest
        container_name: dbserver
        restart: always
        volumes:
            - './storage/mysql:/var/lib/mysql'
        environment:
            - MYSQL_ROOT_PASSWORD=rkskekfk1234!@#$
            - MYSQL_DATABASE=ennaru
            - TZ=Asia/Seoul
        ports:
            - "3306:3306"

    nginx:
        image: nginx:latest
        container_name: docker-web-nginx-1
        volumes:
            - './config/nginx/nginx.conf:/etc/nginx/nginx.conf'
            - './storage/nginx_log:/var/log/nginx'
        ports:
            - "80:80"
        restart: always
        networks:
          - docker-net
    nginx2:
        image: nginx:latest
        container_name: docker-web-nginx-2
        restart: always
        networks:
          - docker-net
    redis:
        image: redis:latest
        container_name: docker-redis
        #command: redis-server /usr/local/etc/redis/redis.conf
        volumes:
            - './config/redis/redis.conf:/usr/local/etc/redis/redis.conf'
        ports:
            - "6379:6379"
    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.6
        container_name: docker-zookeeper
        environment:
            - ZOOKEEPER_SERVER_ID=1
            - ZOOKEEPER_CLIENT_PORT=2100
            - ZOOKEEPER_TICK_TIME=2000
            - ZOOKEEPER_INIT_LIMIT=5
            - ZOOKEEPER_SYNC_LIMIT=2
        ports:
            - "21000:2100"
        networks:
          - docker-net
    kafka:
        image: confluentinc/cp-kafka:7.4.6
        depends_on:
            - zookeeper
        ports:
        - "9092:9092"
        - "9094:9094"
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_ZOOKEEPER_CONNECT=docker-zookeeper:2100
            - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://127.0.0.1:9093,INNER_EXTERNAL://192.168.45.101:9094
            - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,INNER_EXTERNAL:PLAINTEXT
            - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
            - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
            - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
        networks:
          - docker-net
    # grafana:
    #     image: grafana/grafana:latest
    #     container_name: docker-grafana
    #     volumes:
    #         - './grafana:/var/lib/grafana'
    #     environment:
    #         - GF_INSTALL_PLUGS=grafana-clock-panel
    #         - TZ=Asia/Seoul
    #     ports:
    #         - "3000:3000"
    # gitlab:
    #     image: gitlab/gitlab-ce:latest
    #     container_name: docker-gitlab
    #     hostname: 127.0.0.1
    #     environment:
    #         TZ: 'Asia/Seoul'
    #         GITLAB_OMNIBUS_CONFIG: |
    #             external_url 'http://127.0.0.1:8081'
    #             gitlab_rails['gitlab_shell_ssh_port'] = 2224
    #     ports:
    #         - "8081:8081"
    #         - "2224:2224"
    #         - '443:443'
    #     volumes:
    #         - './gitlab/config:/etc/gitlab'
    #         - './gitlab/logs:/var/log/gitlab'
    #         - './gitlab/data:/var/opt/gitlab'
    #     #restart: always
    #     shm_size: '256m'
    #     networks:
    #       - docker-net
volumes:
    server_volume:
        external: true
networks:
    docker-net:
        driver: bridge